/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipperClipperD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipperPath64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipperPathD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipperPathsD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipperPolyTreeD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipperPointD {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_ClipperPointD() {
    const UNINIT: ::std::mem::MaybeUninit<ClipperPointD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClipperPointD>(),
        16usize,
        concat!("Size of: ", stringify!(ClipperPointD))
    );
    assert_eq!(
        ::std::mem::align_of::<ClipperPointD>(),
        8usize,
        concat!("Alignment of ", stringify!(ClipperPointD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClipperPointD),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClipperPointD),
            "::",
            stringify!(y)
        )
    );
}
pub const ClipperFillRule_EVEN_ODD: ClipperFillRule = 0;
pub const ClipperFillRule_NON_ZERO: ClipperFillRule = 1;
pub const ClipperFillRule_POSITIVE: ClipperFillRule = 2;
pub const ClipperFillRule_NEGATIVE: ClipperFillRule = 3;
pub type ClipperFillRule = ::std::os::raw::c_uint;
pub const ClipperClipType_NONE: ClipperClipType = 0;
pub const ClipperClipType_INTERSECTION: ClipperClipType = 1;
pub const ClipperClipType_UNION: ClipperClipType = 2;
pub const ClipperClipType_DIFFERENCE: ClipperClipType = 3;
pub const ClipperClipType_XOR: ClipperClipType = 4;
pub type ClipperClipType = ::std::os::raw::c_uint;
extern "C" {
    pub fn clipper_pathd(mem: *mut ::std::os::raw::c_void) -> *mut ClipperPathD;
}
extern "C" {
    pub fn clipper_pathd_of_points(
        mem: *mut ::std::os::raw::c_void,
        pts: *mut ClipperPointD,
        len_pts: usize,
    ) -> *mut ClipperPathD;
}
extern "C" {
    pub fn clipper_pathd_add_point(path: *mut ClipperPathD, pt: ClipperPointD);
}
extern "C" {
    pub fn clipper_pathsd(mem: *mut ::std::os::raw::c_void) -> *mut ClipperPathsD;
}
extern "C" {
    pub fn clipper_pathsd_of_paths(
        mem: *mut ::std::os::raw::c_void,
        paths: *mut *mut ClipperPathD,
        len_paths: usize,
    ) -> *mut ClipperPathsD;
}
extern "C" {
    pub fn clipper_pathsd_add_path(paths: *mut ClipperPathsD, p: *mut ClipperPathD);
}
extern "C" {
    pub fn clipper_pathsd_add_paths(a: *mut ClipperPathsD, b: *mut ClipperPathsD);
}
extern "C" {
    pub fn clipper_pathd_length(path: *mut ClipperPathD) -> usize;
}
extern "C" {
    pub fn clipper_pathd_get_point(
        path: *mut ClipperPathD,
        idx: ::std::os::raw::c_int,
    ) -> ClipperPointD;
}
extern "C" {
    pub fn clipper_pathsd_length(paths: *mut ClipperPathsD) -> usize;
}
extern "C" {
    pub fn clipper_pathsd_path_length(
        paths: *mut ClipperPathsD,
        idx: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn clipper_pathsd_get_path(
        mem: *mut ::std::os::raw::c_void,
        paths: *mut ClipperPathsD,
        idx: ::std::os::raw::c_int,
    ) -> *mut ClipperPathD;
}
extern "C" {
    pub fn clipper_pathsd_get_point(
        paths: *mut ClipperPathsD,
        path_idx: ::std::os::raw::c_int,
        point_idx: ::std::os::raw::c_int,
    ) -> ClipperPointD;
}
extern "C" {
    pub fn clipper_polytreed(
        mem: *mut ::std::os::raw::c_void,
        parent: *mut ClipperPolyTreeD,
    ) -> *mut ClipperPolyTreeD;
}
extern "C" {
    pub fn clipper_polytreed_parent(pt: *mut ClipperPolyTreeD) -> *const ClipperPolyTreeD;
}
extern "C" {
    pub fn clipper_polytreed_get_child(
        pt: *mut ClipperPolyTreeD,
        idx: usize,
    ) -> *const ClipperPolyTreeD;
}
extern "C" {
    pub fn clipper_polytreed_set_inv_scale(pt: *mut ClipperPolyTreeD, value: f64);
}
extern "C" {
    pub fn clipper_polytreed_inv_scale(pt: *mut ClipperPolyTreeD) -> f64;
}
extern "C" {
    pub fn clipper_polytreed_add_child(
        pt: *mut ClipperPolyTreeD,
        path: *mut ClipperPath64,
    ) -> *mut ClipperPolyTreeD;
}
extern "C" {
    pub fn clipper_polytreed_count(pt: *mut ClipperPolyTreeD) -> usize;
}
extern "C" {
    pub fn clipper_polytreed_is_hole(pt: *mut ClipperPolyTreeD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clipper_polytreed_polygon(
        mem: *mut ::std::os::raw::c_void,
        pt: *mut ClipperPolyTreeD,
    ) -> *mut ClipperPathD;
}
extern "C" {
    pub fn clipper_polytreed_area(pt: *mut ClipperPolyTreeD) -> f64;
}
extern "C" {
    pub fn clipper_polytreed_to_paths(
        mem: *mut ::std::os::raw::c_void,
        pt: *mut ClipperPolyTreeD,
    ) -> *mut ClipperPathsD;
}
extern "C" {
    pub fn clipper_clipperd(
        mem: *mut ::std::os::raw::c_void,
        precision: ::std::os::raw::c_int,
    ) -> *mut ClipperClipperD;
}
extern "C" {
    pub fn clipper_clipperd_add_subject(c: *mut ClipperClipperD, subjects: *mut ClipperPathsD);
}
extern "C" {
    pub fn clipper_clipperd_add_open_subject(
        c: *mut ClipperClipperD,
        open_subjects: *mut ClipperPathsD,
    );
}
extern "C" {
    pub fn clipper_clipperd_add_clip(c: *mut ClipperClipperD, clips: *mut ClipperPathsD);
}
extern "C" {
    pub fn clipper_clipperd_execute(
        cD: *mut ClipperClipperD,
        ct: ClipperClipType,
        fr: ClipperFillRule,
        closed: *mut ClipperPathsD,
        open: *mut ClipperPathsD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clipper_clipperd_execute_tree_with_open(
        cD: *mut ClipperClipperD,
        ct: ClipperClipType,
        fr: ClipperFillRule,
        tree: *mut ClipperPolyTreeD,
        open: *mut ClipperPathsD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clipper_pathd_size() -> usize;
}
extern "C" {
    pub fn clipper_pathsd_size() -> usize;
}
extern "C" {
    pub fn clipper_polytreed_size() -> usize;
}
extern "C" {
    pub fn clipper_clipperd_size() -> usize;
}
extern "C" {
    pub fn clipper_delete_pathd(p: *mut ClipperPathD);
}
extern "C" {
    pub fn clipper_delete_pathsd(p: *mut ClipperPathsD);
}
extern "C" {
    pub fn clipper_delete_polytreed(p: *mut ClipperPolyTreeD);
}
extern "C" {
    pub fn clipper_delete_clipperd(p: *mut ClipperClipperD);
}
